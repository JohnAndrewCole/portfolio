html, body {
  scroll-behavior: smooth;
  margin: initial;
  text-align: center;
  font-family: "lato", sans-serif;
  background: radial-gradient(ellipse at top, #1e3149 0%, #2D353F 100%);
}

a {
  text-decoration: none;
  color: inherit;
}

ul {
  padding: 2em;
  list-style-position: initial;
}

.main-content-wrapper {
  /* The scaling of the images would add a horizontal scrollbar, so disable x overflow. */
  overflow-x: hidden;
  /* Enable scrolling on the page. */
  overflow-y: auto;
  /* Set the perspective to 2px. This is essentailly the simulated distance from the viewport to transformed objects.*/
  perspective: 2px;
}

.header-section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100vh;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  align-content: space-between;
  color: #ffffff;
  text-shadow: 0 0 5px #566E8B;
}

.text-section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100%;
  z-index: 1;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  align-content: space-between;
  color: #ffffff;
  text-shadow: 0 0 5px #566E8B;
}

.image-break {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 50vh;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  align-content: space-between;
}

.work-section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100%;
  color: #ffffff;
  text-shadow: 0 0 5px #566E8B;
}

.interests-section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100vh;
  z-index: 1;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  align-content: space-between;
  color: #ffffff;
  text-shadow: 0 0 5px #566E8B;
}

.nav-bar {
  position: fixed;
  z-index: 1;
  top: 0;
  left: 0;
  height: 100%;
  overflow: hidden;
  background-color: #566E8B;
  width: 300px;
  display: flex;
  align-content: center;
  justify-content: center;
  flex-direction: column;
  align-content: space-between;
}

.me-image {
  width: 200px !important;
  height: 200px !important;
}

.main-content-wrapper {
  margin-left: 300px;
}

@media only screen and (max-width: 900px) {
  .nav-bar {
    width: 150px;
  }

  .main-content-wrapper {
    margin-left: 150px;
  }

  .me-image {
    width: 90px !important;
    height: 90px !important;
  }
}
@media only screen and (max-width: 600px) {
  .nav-bar {
    width: 0px;
  }

  .main-content-wrapper {
    margin-left: 0px;
  }
}
.nav-bar h1 {
  align-self: center;
  justify-content: flex-start;
  color: #E0F0F0;
}

.nav-bar div {
  padding: 10px;
}

.nav-options a:hover {
  font-size: 1.2em;
}

.contact {
  margin-top: auto;
}

.contact img {
  width: 50px;
  height: 50px;
  border-radius: 50px;
  padding: 10px;
}

.contact img:hover {
  scale: 1.2;
}

.contact p {
  font-size: 0.8em;
  color: #E0F0F0;
}

.collapsed-nav-height {
  height: fit-content;
}

.collapsed-nav-options {
  color: #566E8B;
  background-color: #566E8B;
  transition: transform 0.5s ease-in-out;
  position: fixed;
  top: 0;
  transform: translateX(100%);
  width: 100%;
  z-index: 1;
}

.collapsed-nav-options a {
  float: left;
  display: block;
  color: #E0F0F0;
  text-align: center;
  padding: 14px;
  text-decoration: none;
  margin: auto;
}

.collapsed-nav-options a:hover {
  scale: 1.1;
}

.shown-nav-options {
  transform: translateX(0%);
}

.heading {
  font-size: 2em;
  align-self: center;
  justify-content: flex-start;
  margin-top: 40vh;
}

.summary {
  padding-top: 10px;
  font-size: 1.2em;
  align-self: center;
  justify-content: center;
}

.parallax {
  /* Create the parallax scrolling effect */
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  z-index: -1;
}

.header {
  background-image: url("../img/city-road.jpg");
}

.coding {
  background-image: url("../img/coding.jpg");
}

.piano {
  background-image: url("../img/piano.jpg");
}

.skyscraper {
  background-image: url("../img/neon-skyscraper.jpg");
}

.image-credits {
  justify-self: flex-end;
  align-self: flex-end;
  margin-top: auto;
  z-index: 2;
}

.header-image {
  background-image: url("../img/city-road.jpg");
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 50% 50%;
}

.piano-image {
  background-image: url("../img/piano.jpg");
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 50% 50%;
}

.skyscraper-image {
  background-image: url("../img/neon-skyscraper.jpg");
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 50% 50%;
}

.inner-content {
  padding: 2em;
}

.inner-content span {
  font-size: 1.5em;
  margin: 30px;
  display: block;
}

.inner-content h2 {
  padding: 0.5em;
  font-size: 1.6em;
}

.inner-content:first-child {
  padding-top: 20px;
}

.inner-content:last-child {
  padding-bottom: 20px;
}

.inner-content li {
  padding: 2px;
}

.cards {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  align-content: center;
  justify-content: center;
}

.card {
  background-color: #7489A2;
  border-radius: 10px;
  width: 300px;
  height: 400px;
  margin: 20px;
  overflow: hidden;
  text-overflow: clip;
  transition: width 0.5s ease-in-out;
}

.card img {
  margin: 5px;
  padding: 5px;
  width: auto;
  height: 25%;
}

.card p {
  padding: 0px;
  width: 250px;
  overflow: hidden;
  display: inline-block;
  text-decoration: none;
  text-overflow: ellipsis;
  white-space: normal;
  font-size: 0.9em;
}

.card a {
  text-decoration: underline !important;
  color: #113BA1;
}

.cards :hover {
  scale: 1.01;
}

.card img, p, h3, h4 {
  pointer-events: none;
  padding: 0px;
}

.bigger {
  width: 400px;
  height: 500px;
}

/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */
.hamburger {
  padding: 10px 13px;
  display: inline-block;
  cursor: pointer;
  position: fixed;
  z-index: 2;
  right: 0;
  top: 0;
  transition-property: opacity, filter;
  transition-duration: 0.15s;
  transition-timing-function: linear;
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;
}
.hamburger:hover {
  opacity: 0.7;
}
.hamburger.is-active:hover {
  opacity: 0.7;
}
.hamburger.is-active .hamburger-inner,
.hamburger.is-active .hamburger-inner::before,
.hamburger.is-active .hamburger-inner::after {
  background-color: #E0F0F0;
}

.hamburger-box {
  width: 40px;
  height: 24px;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: -2px;
}
.hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
  width: 40px;
  height: 4px;
  background-color: #E0F0F0;
  border-radius: 4px;
  position: absolute;
  transition-property: transform;
  transition-duration: 0.15s;
  transition-timing-function: ease;
}
.hamburger-inner::before, .hamburger-inner::after {
  content: "";
  display: block;
}
.hamburger-inner::before {
  top: -10px;
}
.hamburger-inner::after {
  bottom: -10px;
}

/*
 * Collapse
 */
.hamburger--collapse .hamburger-inner {
  top: auto;
  bottom: 0;
  transition-duration: 0.13s;
  transition-delay: 0.13s;
  transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--collapse .hamburger-inner::after {
  top: -20px;
  transition: top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), opacity 0.1s linear;
}
.hamburger--collapse .hamburger-inner::before {
  transition: top 0.12s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--collapse.is-active .hamburger-inner {
  transform: translate3d(0, -10px, 0) rotate(-45deg);
  transition-delay: 0.22s;
  transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
.hamburger--collapse.is-active .hamburger-inner::after {
  top: 0;
  opacity: 0;
  transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333), opacity 0.1s 0.22s linear;
}
.hamburger--collapse.is-active .hamburger-inner::before {
  top: 0;
  transform: rotate(-90deg);
  transition: top 0.1s 0.16s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.25s cubic-bezier(0.215, 0.61, 0.355, 1);
}

/*
 * Collapse Reverse
 */
.hamburger--collapse-r .hamburger-inner {
  top: auto;
  bottom: 0;
  transition-duration: 0.13s;
  transition-delay: 0.13s;
  transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--collapse-r .hamburger-inner::after {
  top: -20px;
  transition: top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), opacity 0.1s linear;
}
.hamburger--collapse-r .hamburger-inner::before {
  transition: top 0.12s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--collapse-r.is-active .hamburger-inner {
  transform: translate3d(0, -10px, 0) rotate(45deg);
  transition-delay: 0.22s;
  transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
.hamburger--collapse-r.is-active .hamburger-inner::after {
  top: 0;
  opacity: 0;
  transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333), opacity 0.1s 0.22s linear;
}
.hamburger--collapse-r.is-active .hamburger-inner::before {
  top: 0;
  transform: rotate(90deg);
  transition: top 0.1s 0.16s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.25s cubic-bezier(0.215, 0.61, 0.355, 1);
}

/*# sourceMappingURL=main.css.map */
